buildscript {
	ext {
		springBootVersion = '1.3.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

	}
}

plugins {
	id "org.sonarqube" version "2.0.1"
	id "net.saliman.cobertura" version "2.3.2"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
//apply plugin: 'war'
apply plugin: 'project-report'
apply plugin: 'net.saliman.cobertura'
apply plugin: 'application'

mainClassName = 'com.udr.SpringGradleRecordDbApplication'
//apply plugin: 'checkstyle'
//apply plugin: "org.sonarqube" //this plugin needs connection to a database
//apply plugin: "sonar"

jar {
	baseName = 'springgradlerecorddb'
	version = '0.0.1-SNAPSHOT'
//	manifest{
//		attributes "Main-Class":"com.udr.SpringGradleRecordDbApplication"
//	}
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}
//
//development {
//	dataSource {
//		dbCreate = "create-drop" // one of 'create', 'create-drop', 'update', 'validate', ''
//		url = "jdbc:h2:~/cool;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE"
//	}


dependencies {
		compile('org.springframework.boot:spring-boot-starter-data-jpa')
		compile('org.springframework.boot:spring-boot-starter-security')
		compile('org.springframework.boot:spring-boot-starter-jdbc')
		compile('org.springframework.boot:spring-boot-starter-thymeleaf')
		compile('org.springframework.boot:spring-boot-starter-web')
		compile('org.springframework.boot:spring-boot-starter-actuator')
		compile('com.h2database:h2')
		runtime('mysql:mysql-connector-java')
		testCompile('org.springframework.boot:spring-boot-starter-test')
	}


//	eclipse {
//		classpath {
//			containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
//			containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
//		}
//	}
//
//
//	task wrapper(type: Wrapper) {
//		gradleVersion = '2.12'
//	}
//task stage() {
//	dependsOn clean, war
//}
//tasks.stage.doLast() {
//	delete fileTree(dir: "build/distributions")
//	delete fileTree(dir: "build/assetCompile")
//	delete fileTree(dir: "build/distributions")
//	delete fileTree(dir: "build/libs", exclude: "*.war")
//}
//war.mustRunAfter clean
//
//task copyToLib(type: Copy) {
//	into "$buildDir/server"
//	from(configurations.compile) {
//		include "webapp-runner*"
//	}
//}
//
//stage.dependsOn(copyToLib)